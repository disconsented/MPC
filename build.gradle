apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

group = package_group
archivesBaseName = project_name
version = "${java_version}-${project_status}-${project_build}"

buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
  }
}

repositories {
	mavenCentral()
}

dependencies {
  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.2'
  compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.2'
}

targetCompatibility=7
sourceCompatibility=7

//nukes the output dir
task makePretty(type: Delete) {
  delete 'output'
}

//makes clean nuke the output dir.
clean{
   dependsOn makePretty
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

jar {
	manifest {
        attributes 'Main-Class': 'com.disconsented.monolithicPackChecker.Main'
        attributes 'Built-With': 'Gradle v' + project.getGradle().getGradleVersion()
    }
    classifier = ''
    manifest.mainAttributes(
            "Built-By": "Disconsented",
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
    )
}

// Source Jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// Javadoc Jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Deobfuscated Jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

task printDeps {
doLast { println configurations.compile.collect { it.getName() }  }
}

task printDependencies {
    //dumpes what the project was compiled with into a text file.
    doLast {
         file("CompiledWith.txt").text = configurations.compile.collect { it.getName() };
     }
     mustRunAfter "test"
}
tasks.build.dependsOn printDependencies, sourceJar, javadocJar, deobfJar